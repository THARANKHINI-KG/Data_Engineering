# -*- coding: utf-8 -*-
"""iris.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vwef0L0I9jAwMclt-wupPB7IzBVqeP7x
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

# Load Iris Dataset from seaborn's built-in datasets
df = sns.load_dataset('iris')

df.head()

df.tail()

# Rename Columns for Simplicity
df.columns.tolist()

# Missing Values in Dataset
df.isnull().sum()

# Fill missing values with Mean
df['sepal_length'].fillna(df['sepal_length'].mean(), inplace=True)

df.info()

df.describe()

# 6. Sorting DataFrame values (by petal_length descending)
df_sorted = df.sort_values(by='petal_length', ascending=False)
print("\n--- Top 5 Rows after Sorting by petal_length ---\n")
print(df_sorted.head())

# 7. Merge DataFrames (Dummy Example)
species_info = pd.DataFrame({
    'species': ['setosa', 'versicolor', 'virginica'],
    'Species_Type': ['Type A', 'Type B', 'Type C']
})

df_merged = pd.merge(df, species_info, on='species', how='inner')
print("\n--- Merged DataFrame (Sample Rows) ---\n")
print(df_merged.head())

# 8. Apply Function (Convert petal_length from cm to mm)
df['petal_length_mm'] = df['petal_length'].apply(lambda x: x * 10)
print("\n--- Petal Length in mm ---\n")
print(df[['petal_length', 'petal_length_mm']].head())

# 9. Using Lambda Operator (Categorize Sepal Length)
df['sepal_size'] = df['sepal_length'].apply(lambda x: 'Large' if x > 5.5 else 'Small')
print("\n--- Sepal Size Category ---\n")
print(df[['sepal_length', 'sepal_size']].head())

# 10. Visualizing DataFrame
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
sns.histplot(df['sepal_length'], kde=True)
plt.title('Sepal Length Distribution')

plt.subplot(1, 2, 2)
sns.countplot(data=df, x='species')
plt.title('Species Count')

plt.tight_layout()
plt.show()

plt.figure(figsize=(8,6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# 11. Number of Columns in the Dataset
print("\n--- Number of Columns ---\n")
print(df.shape[1])

# 13. How is the Dataset Indexed?
print("\n--- DataFrame Index ---\n")
print(df.index)

# 14. Number of Observations in Dataset
print("\n--- Number of Observations ---\n")
print(df.shape[0])

# check for duplicates
print(df.duplicated().sum())

# Dummy DataFrame 1: Species Information
species_info = pd.DataFrame({
    'Species': ['setosa', 'versicolor', 'virginica'],
    'Species_Type': ['Type A', 'Type B', 'Type C']
})

# Dummy DataFrame 2: Petal Information
petal_info = pd.DataFrame({
    'Species': ['setosa', 'versicolor'],
    'Petal_Color': ['White', 'Pink']
})

inner_join = pd.merge(species_info, petal_info, on='Species', how='inner')
print("\n--- Inner Join Result ---\n")
print(inner_join)

left_join = pd.merge(species_info, petal_info, on='Species', how='left')
print("\n--- Left Join Result ---\n")
print(left_join)

right_join = pd.merge(species_info, petal_info, on='Species', how='right')
print("\n--- Right Join Result ---\n")
print(right_join)

outer_join = pd.merge(species_info, petal_info, on='Species', how='outer')
print("\n--- Outer Join Result ---\n")
print(outer_join)