# -*- coding: utf-8 -*-
"""order data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Lq1Wcn9pYjcqlWk8_oLCmcAVAHTwm4S
"""

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, max, min, sum, countDistinct, concat_ws, avg, when, rank, row_number
from pyspark.sql.window import Window

spark = SparkSession.builder.appName("CustomerTransformations").getOrCreate()

df = spark.read.csv("orders.csv", header=True, inferSchema=True)

df.show(10)

# Filter active customers
active_customers = df.filter(col("cust_status") == "active")
active_customers.show()

# Add Priority Column: High if cust_order >= 7 else Low
active_customers = active_customers.withColumn(
    "priority",
    when(col("cust_order") >= 7, "High").otherwise("Low")
)
active_customers.show()

# Add Full Name Column (FirstName LastName)
active_customers = active_customers.withColumn(
    "full_name",
    concat_ws(" ", col("cust_fname"), col("cust_lname"))
)
active_customers.show()

# Group By cust_status and Aggregate Total cust_order
status_order_agg = df.groupBy("cust_status").agg(
    sum("cust_order").alias("total_orders")
)
status_order_agg.show()

# --- ACTION 7: Collect Active Customer Rows ---
print("---- Collected Data ----")
collected_data = active_customers.collect()
for row in collected_data:
    print(row)

# Filter Active Customers
active_customers = df.filter(col("cust_status") == "active")
print("---- Active Customers ----")
active_customers.show()

# GroupBy Aggregation: Total & Average Orders by Status
status_agg = df.groupBy("cust_status").agg(
    sum("cust_order").alias("total_orders"),
    avg("cust_order").alias("average_orders")
)
print("---- Total & Average Orders by Status ----")
status_agg.show()

# Add Full Name Column
customers = df.withColumn("full_name", concat_ws(" ", col("cust_fname"), col("cust_lname")))
print("---- Customers with Full Name ----")
customers.show(10)

# Window Function: Rank & Row_Number by Order Count
window_spec = Window.orderBy(col("cust_order").desc())

ranked_customers = customers.withColumn(
    "rank",
    rank().over(window_spec)
).withColumn(
    "row_number",
    row_number().over(window_spec)
)

print("---- Customers Ranked by cust_order ----")
ranked_customers.show(10)

# GroupBy Full Name Prefix (First Letter) and Count
name_group = customers.withColumn("initial", col("cust_fname").substr(1,1)) \
    .groupBy("initial").agg(
        sum("cust_order").alias("total_orders"),
        avg("cust_order").alias("average_order")
    )
print("---- Aggregation by First Letter of Name ----")
name_group.show(10)

customers.orderBy(col("cust_order").desc()).show(5)

customers = customers.withColumn(
    "order_category",
    when(col("cust_order") >= 8, "High")
    .when(col("cust_order") >= 5, "Medium")
    .otherwise("Low")
)

print("---- Customers with Order Categories ----")
customers.show(10)