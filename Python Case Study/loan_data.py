# -*- coding: utf-8 -*-
"""loan data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bVrKc1scDmtc7FXhMOI6zueQxWNoqmex
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load Data into DataFrame
df = pd.read_csv('/content/sample_data/LoanData.csv')

# first 5 rows
df.head()

# last 5 rows
df.tail()

# 2. Printing the Column Names of the DataFrame
print(df.columns.tolist())

# 3. Summary of Data Frame
df.info()

# 4. Descriptive Statistical Measures
df.describe(include='all')

# 5. Missing value count
print(df.isnull().sum())



# 6. Sorting DataFrame values (by ApplicantIncome descending)
df_sorted = df.sort_values(by='ApplicantIncome', ascending=False)
print("\n--- Data Sorted by ApplicantIncome (Descending) ---\n")
print(df_sorted[['Loan_ID', 'ApplicantIncome']].head())

# 7. Merging DataFrames Example (Merge df with itself on Loan_ID)
df_merged = pd.merge(df, df, on='Loan_ID', suffixes=('_left', '_right'))
print("\n--- Merged DataFrame (Sample Rows) ---\n")
print(df_merged.head())

# 8. Apply Function (Convert 'LoanAmount' from thousands to actual amount)
df['LoanAmount'] = df['LoanAmount'].apply(lambda x: x * 1000)
print("\n--- LoanAmount Converted to Actual Amount ---\n")
print(df[['Loan_ID', 'LoanAmount']].head())

# 9. Using Lambda Operator (Categorize Income Levels)
df['Income_Level'] = df['ApplicantIncome'].apply(lambda x: 'High' if x > 5000 else 'Low')
print("\n--- Applicant Income Level ---\n")
print(df[['Loan_ID', 'ApplicantIncome', 'Income_Level']].head())

# 10. Visualizing DataFrame (Histogram, Countplot, Heatmap)
plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(df['ApplicantIncome'], kde=True)
plt.title('Applicant Income Distribution')

plt.subplot(1,2,2)
sns.countplot(data=df, x='Loan_Status')
plt.title('Loan Status Count')

plt.tight_layout()
plt.show()

# 11. Number of Columns in Dataset
print("\n--- Number of Columns ---\n")
print(df.shape[1])

# 13. How is Dataset Indexed?
print("\n--- DataFrame Index ---\n")
print(df.index)

# 14. Number of Observations (Rows) in Dataset
print("\n--- Number of Observations ---\n")
print(df.shape[0])
