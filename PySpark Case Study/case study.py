# -*- coding: utf-8 -*-
"""Case Study

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sXcInRK9M3tCMCsRtvyx8bC0Tl_XgaqK
"""

# Install PySpark
!pip install pyspark

# Import Required Libraries
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, max, min, sum, countDistinct

# Create SparkSession in Local Mode
spark = SparkSession.builder \
    .appName("Colab PySpark Local Mode") \
    .master("local[*]") \
    .getOrCreate()

"""### LOAN DATA"""

# Load data
df = spark.read.csv("/content/loan.csv", header=True, inferSchema=True)

df.show(10)

# Number of loans in each category
df.groupBy("Loan Category").count().show()

# People who have taken loans > 1 lakh
df.filter(col("Loan Amount").cast("int") > 100000).count()

# People with income > 60000
df.filter(col("Income") > 60000).count()

# People with Returned >= 2 and Income < 50000
df.filter((col(" Returned Cheque") >= 2) & (col("Income") < 50000)).count()

# People with Returned >= 2 and Marital Status = SINGLE
df.filter((col(" Returned Cheque") >= 2) & (col("Marital Status") == "SINGLE")).count()

# People with Expenditure > 50000
df.filter(col("Expenditure") > 50000).count()

# Members eligible for credit card (e.g., Income > 50000 & Expenditure < Income*0.5)
df.filter((col("Income") > 50000) & (col("Expenditure") < col("Income") * 0.5)).count()

"""### CREDIT DATA"""

credit_df = spark.read.csv("/content/credit card.csv", header=True, inferSchema=True)

credit_df.show(10)

# Credit card users in Spain
credit_df.filter(col("Geography") == "Spain").count()

# Members eligible and active (assume IsActiveMember = 1 and Exited = 0)
credit_df.filter((col("IsActiveMember") == 1) & (col("Exited") == 0)).count()

"""### TRANSACTION DATA"""

txn_df = spark.read.csv("/content/txn.csv", header=True, inferSchema=True)

txn_df.show(10)

# Max withdrawal amount
txn_df.agg(max(" WITHDRAWAL AMT ")).show()

# Min withdrawal amount
txn_df.agg(min(" WITHDRAWAL AMT ")).show()

# Max deposit amount
txn_df.agg(max(" DEPOSIT AMT ")).show()

# Min deposit amount
txn_df.agg(min(" DEPOSIT AMT ")).show()

# Sum of balance for each account
txn_df.groupBy("Account No").agg(sum("BALANCE AMT").alias("Total Balance")).show()

# Number of transactions per date
txn_df.groupBy("VALUE DATE").count().show()

# Customers with withdrawal > 1 lakh
txn_df.filter(col(" WITHDRAWAL AMT ") > 100000).select("Account No").distinct().show()
